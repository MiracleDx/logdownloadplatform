<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <include resource="org/springframework/boot/logging/logback/defaults.xml"/>

  <springProperty scope="context" name="springAppName" source="spring.application.name" />

  <!--<property resource="logback.properties"/>-->
  <property name="LOG_FILE" value="${BUILD_FOLDER:-log}/${springAppName}" />

  <!--Console日志-->
  <appender name="CONSOLE-LOG" class="ch.qos.logback.core.ConsoleAppender">
    <!--<layout class="ch.qos.logback.classic.PatternLayout">-->
    <!--<pattern>[%d{yyyy-MM-dd' 'HH:mm:ss.sss}] %d [%X{traceId}-%X{spanId}-%X{parentId}-%X{exportable}] [%C] [%t] [%-5p] %m%n</pattern>-->
    <!--</layout>-->
    <encoder>
      <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%X{requestId}] [%-5p] [%t] [%C] [%M] [%L] [%m]%n</pattern>
      <charset>UTF-8</charset>
    </encoder>
  </appender>

  <!--All日志-->
  <appender name="ALL-LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <encoder>
      <pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%X{requestId}] [%-5p] [%t] [%C] [%M] [%L] [%m]%n</pattern>
      <charset>UTF-8</charset>
    </encoder>

    <!--滚动策略-->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <!--历史文件名-->
      <fileNamePattern>${LOG_FILE}/${springAppName}.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
      <!--保留 30 天的日志-->
      <maxHistory>30</maxHistory>
      <!--单个日志文件大小-->
      <maxFileSize>100MB</maxFileSize>
    </rollingPolicy>
  </appender>

  <!--获取比info级别高(包括info级别)但除error级别的日志-->
  <appender name="INFO-LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>ERROR</level>
      <onMatch>DENY</onMatch>
      <onMismatch>ACCEPT</onMismatch>
    </filter>
    <encoder>
      <pattern>[%d{yyyy-MM-dd HH:mm:ss.sss}] [%X{requestId}] [%-5p] [%t] [%C] [%M] [%L] [%m]%n</pattern>
      <!--解决中文乱码问题-->
      <charset>UTF-8</charset>
    </encoder>

    <!--最新的log文件名-->
    <!--<File>logs/XXX.log</File>-->

    <!--滚动策略-->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <!--历史文件名-->
      <fileNamePattern>${LOG_FILE}/${springAppName}-INFO.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
      <!--保留 30 天的日志-->
      <maxHistory>30</maxHistory>
      <!--单个日志文件大小-->
      <maxFileSize>100MB</maxFileSize>
    </rollingPolicy>
  </appender>

  <!--Error日志-->
  <appender name="ERROR-LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
      <level>ERROR</level>
    </filter>
    <encoder>
      <pattern>[%d{yyyy-MM-dd HH:mm:ss.sss}] [%X{requestId}] [%-5p] [%t] [%C] [%M] [%L] [%m]%n</pattern>
      <!--解决中文乱码问题-->
      <charset>UTF-8</charset>
    </encoder>

    <!--最新的log文件名-->
    <!--<File>logs/XXX.log</File>-->

    <!--滚动策略-->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <!--历史文件名-->
      <fileNamePattern>${LOG_FILE}/${springAppName}-ERROR.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
      <!--保留 30 天的日志-->
      <maxHistory>30</maxHistory>
      <!--单个日志文件大小-->
      <maxFileSize>100MB</maxFileSize>
    </rollingPolicy>
  </appender>

  <!--CONTROLLER-->
  <!--获取比info级别高(包括info级别)但除error级别的日志-->
  <appender name="CONTROLLER-LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>ERROR</level>
      <onMatch>DENY</onMatch>
      <onMismatch>ACCEPT</onMismatch>
    </filter>
    <encoder>
      <pattern>[%d{yyyy-MM-dd HH:mm:ss.sss}] [%X{requestId}] [%-5p] [%t] [%C] [%M] [%L] [%m]%n</pattern>
      <!--解决中文乱码问题-->
      <charset>UTF-8</charset>
    </encoder>

    <!--最新的log文件名-->
    <!--<File>logs/XXX.log</File>-->

    <!--滚动策略-->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <!--历史文件名-->
      <fileNamePattern>${LOG_FILE}/${springAppName}-CONTROLLER.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
      <!--保留 30 天的日志-->
      <maxHistory>30</maxHistory>
      <!--单个日志文件大小-->
      <maxFileSize>100MB</maxFileSize>
    </rollingPolicy>
  </appender>

  <!--SERVICE-->
  <!--获取比info级别高(包括info级别)但除error级别的日志-->
  <appender name="SERVICE-LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>ERROR</level>
      <onMatch>DENY</onMatch>
      <onMismatch>ACCEPT</onMismatch>
    </filter>
    <encoder>
      <pattern>[%d{yyyy-MM-dd HH:mm:ss.sss}] [%X{requestId}] [%-5p] [%t] [%C] [%M] [%L] [%m]%n</pattern>
      <!--解决中文乱码问题-->
      <charset>UTF-8</charset>
    </encoder>

    <!--最新的log文件名-->
    <!--<File>logs/XXX.log</File>-->

    <!--滚动策略-->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <!--历史文件名-->
      <fileNamePattern>${LOG_FILE}/${springAppName}-SERVICE.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
      <!--保留 30 天的日志-->
      <maxHistory>30</maxHistory>
      <!--单个日志文件大小-->
      <maxFileSize>100MB</maxFileSize>
    </rollingPolicy>
  </appender>

  <!--定时任务-->
  <!--获取比info级别高(包括info级别)但除error级别的日志-->
  <appender name="SCHEDULE-LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
    <filter class="ch.qos.logback.classic.filter.LevelFilter">
      <level>ERROR</level>
      <onMatch>DENY</onMatch>
      <onMismatch>ACCEPT</onMismatch>
    </filter>
    <encoder>
      <pattern>[%d{yyyy-MM-dd HH:mm:ss.sss}] [%X{requestId}] [%-5p] [%t] [%C] [%M] [%L] [%m]%n</pattern>
      <!--解决中文乱码问题-->
      <charset>UTF-8</charset>
    </encoder>

    <!--最新的log文件名-->
    <!--<File>logs/XXX.log</File>-->

    <!--滚动策略-->
    <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
      <!--历史文件名-->
      <fileNamePattern>${LOG_FILE}/${springAppName}-SCHEDULE.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
      <!--保留 30 天的日志-->
      <maxHistory>30</maxHistory>
      <!--单个日志文件大小-->
      <maxFileSize>100MB</maxFileSize>
    </rollingPolicy>
  </appender>


  <!--CONTROLLER-->
  <!--指定包或者类的日志配置（这里是局部配置，它能覆盖全局配置）-->
  <!-- 自定义配置__配置业务日志输出至单独的日志文件中 -->
  <logger name="com.log.download.platform.config.LogControllerAspectConfig" additivity="false" level="debug">
    <!-- 引用自定义的appender -->
    <appender-ref ref="CONTROLLER-LOG"/>
    <!-- 这里也引用控制台appender，才能在控制台中看到我们的日志 -->
    <appender-ref ref="CONSOLE-LOG"/>
  </logger>

  <!--SERVICE-->
  <!--指定包或者类的日志配置（这里是局部配置，它能覆盖全局配置）-->
  <!-- 自定义配置__配置业务日志输出至单独的日志文件中 -->
  <logger name="com.log.download.platform.config.LogServiceAspectConfig" additivity="false" level="debug">
    <!-- 引用自定义的appender -->
    <appender-ref ref="SERVICE-LOG"/>
    <!-- 这里也引用控制台appender，才能在控制台中看到我们的日志 -->
    <appender-ref ref="CONSOLE-LOG"/>
  </logger>

  <!--SCHEDULE-->
  <!--指定包或者类的日志配置（这里是局部配置，它能覆盖全局配置）-->
  <!-- 自定义配置__配置业务日志输出至单独的日志文件中 -->
  <logger name="com.log.download.platform.schedule" additivity="false" level="debug">
    <!-- 引用自定义的appender -->
    <appender-ref ref="SCHEDULE-LOG"/>
    <!-- 这里也引用控制台appender，才能在控制台中看到我们的日志 -->
    <appender-ref ref="CONSOLE-LOG"/>
  </logger>
  
  <!--异步输出-->
  <appender name="ASYNC-INFO" class="ch.qos.logback.classic.AsyncAppender">
    <!--不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志-->
    <discardingThreshold>0</discardingThreshold>
    <!--更改默认的队列的深度,该值会影响性能.默认值为256-->
    <queueSize>256</queueSize>
    <!--添加附加的appender,最多只能添加一个-->
    <appender-ref ref="CONTROLLER-LOG"/>
  </appender>

  <!--异步输出-->
  <appender name="ASYNC-INFO" class="ch.qos.logback.classic.AsyncAppender">
    <!--不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志-->
    <discardingThreshold>0</discardingThreshold>
    <!--更改默认的队列的深度,该值会影响性能.默认值为256-->
    <queueSize>256</queueSize>
    <!--添加附加的appender,最多只能添加一个-->
    <appender-ref ref="SERVICE-LOG"/>
  </appender>

  <!--异步输出-->
  <appender name="ASYNC-INFO" class="ch.qos.logback.classic.AsyncAppender">
    <!--不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志-->
    <discardingThreshold>0</discardingThreshold>
    <!--更改默认的队列的深度,该值会影响性能.默认值为256-->
    <queueSize>256</queueSize>
    <!--添加附加的appender,最多只能添加一个-->
    <appender-ref ref="ALL-LOG"/>
  </appender>

  <!--异步输出-->
  <appender name="ASYNC-INFO" class="ch.qos.logback.classic.AsyncAppender">
    <!--不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志-->
    <discardingThreshold>0</discardingThreshold>
    <!--更改默认的队列的深度,该值会影响性能.默认值为256-->
    <queueSize>256</queueSize>
    <!--添加附加的appender,最多只能添加一个-->
    <appender-ref ref="INFO-LOG"/>
  </appender>

  <appender name="ASYNC-ERROR" class="ch.qos.logback.classic.AsyncAppender">
    <!--不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志-->
    <discardingThreshold>0</discardingThreshold>
    <!--更改默认的队列的深度,该值会影响性能.默认值为256-->
    <queueSize>256</queueSize>
    <!--添加附加的appender,最多只能添加一个-->
    <appender-ref ref="ERROR-LOG"/>
  </appender>
  

  <!--用来指定基础日志输出级别-->
  <!-- 日志级别排序为： TRACE < DEBUG < INFO < WARN < ERROR -->
  <root level="INFO">
    <!--添加append-->
    <appender-ref ref="CONSOLE-LOG" />
    <appender-ref ref="ALL-LOG" />
    <appender-ref ref="INFO-LOG" />
    <appender-ref ref="ERROR-LOG" />
  </root>
</configuration>